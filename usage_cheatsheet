Various notes that have proven handy for actually using BeerfestDB for the Cambridge Beer Festivals

Author: Midori Harris, Head Cellar Manager

General data entry

To get special characters in, go to http://unicode-table.com/, find
the character, and click it. There used to be a handy "copy to
clipboard" button on the popup, and you could paste from that into the
web interface or a mysql command. Sigh.

Or go to http://www.fileformat.info/info/unicode/char/a.htm, find the
character, follow its link, and copy/past from the Java Data ->
string.toUpperCase() table entry.

Summer Festival

1. Create festival - use web interface
2. Create "Main Beer Order" order batch - web interface
3. a. Can enter small things (e.g. early orders a la Buxton) manually
	good idea to confirm that it "takes" by reloading page
   b. Most order data will go in via load_data.pl
4. Edit beerfestdb_web.yml to update festival name.
	Consult USAGE.txt for other (temporary) edits to beerfestdb_web.yml as needed to allow convenient loading.
5. Update logo, i.e. add current to home/images/directory
6. Update beerfestdb/util/templates/order_template.tt2 to refer to shiny new logo.
7. Use dump_to_template.pl to generate order .tex files. You know the rest. e.g.
	> dump_to_template.pl -t templates/order_template.tt2 \
                      -l images/cake.png -o distributor > some_order.tex
	also note: if you don't know what to put for -o option, run script without it and it'll prompt you
	-s option splits into multiple .tex files based on -o option setting; use instead of '> filename.tex' (e.g. '-o distributor -s' yields one .tex per supplier)
 
Info gathering spreadsheet --> load_data input
1. File -> Download as
2. Open; save Order sheet as text .csv
3. Save required columns (e.g. for the 2015 sheet: cut -f1,2,3,4,5,6,8,9,12)
4. Delete any rows not ready to order yet
5. Munge SOR:
	a. Duplicate lines
	b. Add a column for order_sor (can repurpose an existing col) to ALL rows
	c. '1' for SOR; '0' for all other rows
	d. Delete extra column(s) from ALL rows
6. Correct columns headers as needed (see list below)
7. Add remaining required columns: festival name & year, product category, order batch, is-final ('1' for yes). Example header row:
    brewery_name	product_name	product_abv	product_style	cask_size	cask_count	order_sor	distributor_name	order_batch	product_category	festival_name	festival_year	order_finalized
8. Feed to load_data.pl with default beerfestdb.yml (i.e. default protected categories including company, product)
	a. if it squawks "Protection error (ProductOrder):" uncomment ProductOrder to create (wait for it) this product order
9. Correct any errors revealed by step 7; confirm that all remaining differences from existing data are indeed new things
10. Unprotect company & product in beerfestdb.yml; load!
11. Spawn 'n' send orders as above


To spawn summer fest programme beer list fodder:
  1. go into mysql command line (% mysql -p beerfestdb)
  2. the query is
	select * from programme_notes_view where festival='[name of festival of interest]'
	e.g. select * from programme_notes_view where festival='41st Cambridge Beer festival' 
  3. invoke from unix comand line to funnel output to a file
	echo 'select * from programme_notes_view where festival="[name of festival of interest]"' | mysql -p beerfestdb > [output_file.txt]
	e.g. % echo 'select * from programme_notes_view where festival="41st Cambridge Beer Festival"' | mysql -p beerfestdb > cbf41_beerlist.txt

To get new info to replace old (e.g. improved tasting notes), use load_data.pl overwrite mode (-o option).


When beer comes
  Tick "arrived"
  Products received --> gyle to correct gyle ABVs
  For discrepancies
	can edit size of existing casks
	to add cask, need existing gyle for the beer
	manually assign cask ID, preferably next available in sequence
	  use this query:  select max(cm.cellar_reference) from cask_management cm, festival f where f.festival_id=cm.festival_id and f.name='41st Cambridge Beer Festival';
	NOTE: new casks added at this point should NOT have an order batch assigned
  Prices go in Products Received tab, sale price column

For dip sheets: manually enter "Measurement batches" -- otherwise no dip data slots print out!

If a beer gets condemned, record it for each affected cask in Casks by
Stillage > condemned. Someone should also fill out a "Problematic Beer
Report" form.

If there's a reorder
1. Create a new order batch in the web interface. Use its name in step 2.
2. Create a file with the usual details, as in main order loading. 
   2a. can omit product_abv and product_style if it's all stuff that's been in the main order, as the db will know about it
3. Unprotect ProductOrder in beerfestdb.yml, then load & go!
   3a. also don't forget to flag them as arrived, either in the load file (include order_finalized and order_received, both "1") or the interface.


Wine & Mead
  To make signs come out with "glass" (not "pint"), use web interface:
    Festival -> Products Received -> Wine|Mead ->
    set Sale volume column to glass


October & Winter festivals
  Cellar isn't involved in ordering, so we just do most of the db stuff once beer has arrived.

1. Create festival in web interface.
2. Create file(s) to feed to load_data.pl, much as for summer but with less fuss about SOR. Include columns for both order_finalized and order_received.
	expect to unprotect Gyle and FestivalProduct
	don't forget the bit about updating the festival name
3. Use dump_to_oodoc.pl to spawn programme; the output will almost certainly need some manual tweaking.
	watch out: if you run it more than once with the same output filename, it'll append to the existing file rather than overwrite

Logo
  reduce to ~150 pixels, and flatten (no alpha channel)

Appendix 1

column headings for files to load (using load_data.pl):
  copied & human-friendlied from beerfestdb/lib/BeerFestDB/Loader.pm
  script also accepts space or - instead of _
        festival_year
        festival_name
        festival_description
        bar_description
        stillage_loc	stillage_location also works
        bay_number
        bay_position
        brewery_name	brewer also works for all brewery* headers
        brewery_full_name
        brewery_loc_desc
        brewery_region
        brewery_year_founded
        brewery_comment
        brewery_website
        product_name
        product_style
        product_description
        product_long_description
        product_comment
        product_abv
        gyle_brewery_number	see above
        gyle_abv
        product_sale_price
        gyle_comment
        distributor_name
        distributor_full_name
        distributor_loc_desc
        distributor_year_founded
        distributor_comment
        cask_cellar_id
        cask_festival_id
        cask_count
        cask_size
        cask_unit
        cask_price
        cask_comment
        cask_measurement_date
        cask_measurement_volume
        cask_measurement_comment
        product_category
        order_batch_name	order_batch will go in as order_batch_name
        order_batch_date
        order_finalized	british spelling 'finalised' also works
        order_received
        order_comment
        order_sor	order_sale_or_return also works
        contact_type
        contact_first_name
        contact_last_name
        contact_street_address
        contact_postcode
        contact_country_iso2
        contact_email
        contact_phone	contact_telephone also works
        contact_comment
        telephone_type	telephone will go in as telephone_type

To load companies using load_data.pl, use the brewery_* column headers, and unprotect Company in the .yaml file.


